## オブジェクト指向のよさ
- 全体見通しのよさ
- 機能追加・修正が安全簡単
- 継続的な変更が楽になる

## オブジェクト指向は部品指向
↑知ってる

## 名前大事
オブジェクト指向の明暗を分けるのは名前
名前を何度も見直して改善を続けるのがオブジェクト指向

## 自分が考えるオブジェクト指向

何かを変える必要があるときに目に入ってしまう余計な情報をなくすことがオブジェクト指向なんじゃないかなって

## 手続き型とオブジェクト指向の発想の違い

メソッドに分けるのがオブジェクト指向
手続きを小さな手続きに分割する

## オブジェクトの作成

誰がいつ作成するかは重要な設計課題
newをどこに書くのかということ

## オブジェクト指向の学び方

### オブジェクト指向への地図

#### 抽象化で生産性を高める

すべてのプログラムはアルゴリズムとデータ構造から成り立つ。
つまりデータを特定の処理方法(アルゴリズム)で処理をするのがプログラム。

プログラミング言語はこれら２つを高度化つまり抽象化することによって、
生産性を高め品質を向上させることを目指している。

#### 抽象化が意味するところの具体例

- ##### 関数による手続き抽象化
 - 関数の内部を理解せずに利用することができる

- ##### 型によるデータ構造の抽象化
 - 現実の情報を抽象化することでさまざまな情報を定義する
 - メソッドが定義できるのはデータに型があるから

### オブジェクト指向プログラミングの発想「アーキテクチャが鍵」

#### モデル化言語UML

３つの視点に分けることで複雑な現実を正しく表現し理解する。

1. 構造の視点
2. 機能の視点
3. 振る舞いの視点


- ### １構造の視点
概念データモデリング
リソースの抽象化みたいな

- ### ２機能の視点
システムの機能や処理

- ### 3挙動の視点
どのシステムをどのタイミングで動かすか

WebフレームワークにおけるMVCモデルと同様なものなのかも？

## Javascriptでオブジェクト指向

### オブジェクトとは何か

アイデンティティをもつ。独自性を持つ。

代入時には値が複製される
オブジェクトでは参照が複製される

```
// 基本値
var p1 = p2 = 1;
var p3 = p1 / p2;
p1 == p2; //=> true
p2 == p3; //=> true

// オブジェクト
var o1 = o2 = new Number(1);
var o3 = new Number(1);
o1 == o2; //=> true
o1 == o3; //=> false
o1.valueOf() == o3.valueOf(); //=> true
```

o1 と o2 は初めにnew Numberで生成されたオブジェクトを指しているが、
o3は次にnew Numberで生成されたオブジェクトを指している。
==は同じオブジェクトであるかを判定しているためfalseを返す。
最後の行はvalueOf()により値の比較を行っているためtrueとなる。

### コンストラクタとプロタイプ

new を使い呼び出せるFunctionインスタンスをコンストラクタと呼ぶ
ユーザーが定義した関数はすべてコンストラクタ。

コンストラクタは特別なプロパティを持つ
このプロパティをプロトタイプと呼ぶ
プロトタイプはインスタンスの雛形
プロトタイプのプロパティはインスタンス間で共有される

```
function My(value) {
  this.value = value;
}

My.prototype = {
  method: function(){ return this.value}
};
var my1 = new My(1);
var my2 = new My(2);
my1.method(); //=> 1
my2.method(); //=> 2
my1.method == my2.method; //=> true
```

my1, my2 それぞれ異なるオブジェクトがの同一のメソッドを所有している
